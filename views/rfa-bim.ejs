<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RFA Upload</title>
    <!-- นำ styles จาก rfa.ejs มาใช้ -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            min-height: 100vh;
            background: linear-gradient(45deg, #FF5722 50%, #796B63 50%);
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input[type="text"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        input[type="file"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        button {
            background: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
        }

        button:hover {
            background: #45a049;
        }

        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .results-table th, .results-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        
        .results-table th {
            background-color: #f5f5f5;
            font-weight: bold;
        }

        #existingDocuments, #uploadSection {
            display: none;
            margin-top: 20px;
        }

        #uploadStatus {
            margin-top: 15px;
            padding: 10px;
            border-radius: 4px;
        }

        #uploadStatus.success {
            background-color: #dff0d8;
            color: #3c763d;
        }

        #uploadStatus.error {
            background-color: #f2dede;
            color: #a94442;
        }

        input {
            position: relative;
        }
        
        input::placeholder {
            opacity: 0;
        }
        
        input:focus {
            position: relative;
        }

        input:focus::after {
            content: '|';
            position: absolute;
            color: black;
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            50% { opacity: 0; }
        }

        h1, h2 {
            margin-bottom: 20px;
            color: #333;
        }

        a {
            color: #4CAF50;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }
        .search-btn {
            background: #4a148c;
            margin-top: 10px;
            width: 100%;
        }

        .status-message {
            margin: 15px 0;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
        }

        .loading {
            background-color: #e3f2fd;
            color: #1565c0;
        }

        .not-found {
            background-color: #ffebee;
            color: #c62828;
        }

        .found {
            background-color: #e8f5e9;
            color: #2e7d32;
        }    
        #uploadStatus {
            margin-top: 15px;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
        }

        #uploadStatus.uploading {
            background-color: #e3f2fd;
            color: #1565c0;
        }

        #uploadStatus.success {
            background-color: #e8f5e9;
            color: #2e7d32;
        }

        #uploadStatus.error {
            background-color: #ffebee;
            color: #c62828;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input[type="text"],
        .form-group input[type="file"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        button[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            font-weight: bold;
        }

        button[type="submit"]:hover {
            background-color: #45a049;
        }   
        .uploading {
            background-color: #e3f2fd;
            color: #1565c0;
            padding: 10px;
            margin-top: 10px;
            border-radius: 4px;
            text-align: center;
        }

        button[type="submit"]:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }    
        .btn-loading {
            opacity: 0.7;
            cursor: not-allowed;
        }
        
        /* เพิ่ม CSS สำหรับ file validation */
        .file-error {
            border-color: #dc3545;
        }
        
        .validation-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }  
        .highlighted-row {
            background-color: rgba(255, 0, 0, 0.3); /* สีแดงโปร่งใส */
        }  

        /* สไตล์สำหรับ popup */
        .custom-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }

        dialog {
            border: none;
            border-radius: 6px;
            padding: 20px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        dialog::backdrop {
            background: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .modal-content button {
            align-self: flex-end;
            padding: 8px 16px;
        }

        .project-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }

        .table-container {
            margin-bottom: 30px; /* เพิ่มระยะห่างระหว่างตารางกับปุ่ม */
        }

        .form-validation {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
            display: none; /* ซ่อนไว้ก่อน */
            text-align: center;
            padding: 5px 0;
        }

        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #4CAF50;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* ปรับแต่ง Modal */
        .modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            border: none;
            border-radius: 8px;
            padding: 24px;
            max-width: 400px;
            width: 90%;
            z-index: 1000;
        }

        .modal::backdrop {
            background: rgba(0, 0, 0, 0.5);
        }    

        .spinner-container {
            text-align: center;
            margin-top: 15px;
        }

        .spinner-container p {
            margin-top: 10px;
            color: #666;
        }   
        .disabled {
            opacity: 0.5;
            cursor: not-allowed !important; 
        }

    </style>
</head>
<body>
    <div class="container">
        <h1>Update Status Shop Drawing</h1>
        
        <!-- ส่วนที่ 2: เลือกโครงการ -->
        <div class="project-header">
            <label for="site">โครงการ:</label>
            <select id="site" name="site" required>
                <option value="">เลือกโครงการ</option>
            </select>
        </div>    
    
        <!-- ส่วนที่ 3: ตารางแสดงข้อมูล -->
        <div id="documentTable" class="table-container">
            <table class="results-table">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>หมวดงาน</th>
                        <th>เลขที่เอกสาร</th>
                        <th>Rev.No</th>
                        <th>รายชื่อเอกสาร</th>
                        <th>Status</th>
                        <th>File</th>
                        <th>วันที่</th>
                        <th>ผู้ส่ง</th>
                    </tr>
                </thead>
                <tbody id="documentsTableBody"></tbody>
            </table>
        </div>
    
        <!-- ส่วนที่ 4: ปุ่มส่งเอกสาร -->
        <button id="addDocumentBtn" class="btn-submit mt-4">ส่งเอกสาร</button>
    
        <!-- ส่วนที่ 5: ฟอร์มกรอกรายละเอียด -->
        <div id="documentForm" style="display: none;">
            <div class="form-group">
                <label>หมวดงาน:</label>
                <input type="text" id="categoryInput" list="categoryList" required>
                <datalist id="categoryList"></datalist>
            </div>
            <div class="form-group">
                <label>เลขที่เอกสาร:</label>
                <input type="text" id="documentNumber" maxlength="3" pattern="[0-9]{3}" required>
            </div>
            <div class="form-group">
                <label>Rev.No:</label>
                <input type="text" id="revisionNumber" maxlength="2" pattern="[0-9]{2}" required>
            </div>
        </div>
    
        <!-- ส่วนที่ 6: Modal แสดงสถานะเอกสาร -->
        <dialog id="statusModal" class="modal">
            <div class="modal-content">
                <h3>เอกสารฉบับนี้ อยู่ระหว่างการอนุมัติ</h3>
                <p>Status: <span id="documentStatus"></span></p>
                <p>ไม่สามารถส่งซ้ำได้</p>
                <button onclick="this.closest('dialog').close()">ปิด</button>
            </div>
        </dialog>
    
        <!-- ส่วนที่ 7: ฟอร์มส่งเอกสาร -->
        <div id="uploadForm" style="display: none;">
            <div class="form-group">
                <label>ชื่อเอกสาร:</label>
                <input type="text" id="documentName" required>
            </div>
            <div class="form-group">
                <label>แนบไฟล์:</label>
                <input type="file" id="documentFile" required>
            </div>
            <button type="button" id="submitBtn">Submit</button>
        </div>
    
        <!-- ส่วนที่ 9: Modal แสดงผลการบันทึก -->
        <dialog id="successModal" class="modal">
            <div class="modal-content">
                <h3>บันทึกข้อมูลสำเร็จ</h3>
                <button onclick="handleSuccessClose()">ปิด</button>
            </div>
        </dialog>
    </div>
    <script>
        let currentSiteId = null;
        let documentsList = [];

        // สถานะที่อนุญาตให้แก้ไขเอกสาร
        const EDITABLE_STATUSES = ['แก้ไข', 'อนุมัติตามคอมเมนต์ (ต้องแก้ไข)', 'ไม่อนุมัติ'];

        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
            loadSites();
            setupEventListeners();
            setupFormValidation();
            initEmptyTable();

            const addDocumentBtn = document.getElementById('addDocumentBtn');
            addDocumentBtn.disabled = true;
            addDocumentBtn.classList.add('disabled');            
        });

        function setupEventListeners() {
            // การเลือกโครงการ
            document.getElementById('site').addEventListener('change', handleSiteChange);
            
            // ปุ่มส่งเอกสาร
            document.getElementById('addDocumentBtn').addEventListener('click', showDocumentForm);
            
            // ลบ event listener ของปุ่มตรวจสอบเอกสารออก
            
            // ปุ่ม Submit
            document.getElementById('submitBtn').addEventListener('click', handleSubmit);
        }  

        async function loadSites() {
            try {
                const response = await fetch('/user/rfa/user-sites');
                const data = await response.json();
                
                if (data.success) {
                    const siteSelect = document.getElementById('site');
                    siteSelect.innerHTML = '<option value="">เลือกโครงการ</option>';
                    
                    data.sites.forEach(site => {
                        const option = document.createElement('option');
                        option.value = site.id;
                        option.textContent = site.site_name;
                        siteSelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading sites:', error);
                showError('ไม่สามารถโหลดข้อมูลโครงการได้');
            }
        }

        async function loadCategories(siteId) {
            try {
                const response = await fetch(`/user/rfa/categories/${siteId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                if (data.success) {
                    const datalist = document.getElementById('categoryList');
                    datalist.innerHTML = '';
                    data.categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.category_code;
                        option.textContent = category.category_name;
                        datalist.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
                showError('ไม่สามารถโหลดข้อมูลหมวดงานได้');
            }
        }

        async function handleSiteChange(event) {
            currentSiteId = event.target.value;
            const addDocumentBtn = document.getElementById('addDocumentBtn');
            
            if (!currentSiteId) {
                hideAllSections();
                addDocumentBtn.disabled = true;
                addDocumentBtn.classList.add('disabled');
                return;
            }

            addDocumentBtn.disabled = false;
            addDocumentBtn.classList.remove('disabled');

            // แสดงตารางเปล่าทันทีที่เลือกโครงการ
            document.getElementById('documentTable').style.display = 'block';
            initEmptyTable();
            
            // โหลดข้อมูลอื่นๆ
            loadCategories(currentSiteId);
            loadDocuments(currentSiteId);            
        }

        function initEmptyTable() {
            const tbody = document.getElementById('documentsTableBody');
            tbody.innerHTML = '';
            
            // สร้าง 5 แถวเปล่า
            for (let i = 0; i < 5; i++) {
                const tr = document.createElement('tr');
                for (let j = 0; j < 9; j++) { // 9 columns
                    const td = document.createElement('td');
                    td.style.height = '40px'; // กำหนดความสูงของแต่ละแถว
                    tr.appendChild(td);
                }
                tbody.appendChild(tr);
            }
        }

        let categoryHistory = new Set(); // เก็บประวัติหมวดงานที่เคยใช้

        function setupFormValidation() {
            const inputs = ['categoryInput', 'documentNumber', 'revisionNumber'];
            const validationMessage = document.createElement('div');
            validationMessage.className = 'form-validation';
            validationMessage.textContent = 'กรุณากรอกข้อมูลให้ครบทั้ง 3 ช่อง';
            document.getElementById('documentForm').appendChild(validationMessage);

            let debounceTimer;
            inputs.forEach(id => {
                document.getElementById(id).addEventListener('input', () => {
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(validateAndSearch, 500);
                });
            });
        }

        function validateAndSearch() {
            const category = document.getElementById('categoryInput').value;
            const documentNumber = document.getElementById('documentNumber').value;
            const revisionNumber = document.getElementById('revisionNumber').value;
            const validationMessage = document.querySelector('.form-validation');

            if (category && documentNumber && revisionNumber) {
                validationMessage.style.display = 'none';
                showSpinner();
                checkDocument().finally(() => {
                    hideSpinner();
                    document.getElementById('uploadForm').style.display = 'block';
                });
            } else {
                validationMessage.style.display = 'block';
            }
        }

        // แยกฟังก์ชันแสดง/ซ่อน spinner
        function showSpinner() {
            // ลบ spinner เก่าถ้ามี
            hideSpinner();
            const spinner = document.createElement('div');
            spinner.id = 'searchSpinner';
            spinner.className = 'spinner-container';
            spinner.innerHTML = `
                <div class="spinner"></div>
                <p>กำลังค้นหาข้อมูล...</p>
            `;
            document.getElementById('documentForm').appendChild(spinner);
        }

        function hideSpinner() {
            const spinner = document.getElementById('searchSpinner');
            if (spinner) spinner.remove();
        }

        async function loadDocuments(siteId) {
            try {
                const response = await fetch(`/user/rfa/documents/${siteId}`);
                const data = await response.json();
                
                // แสดงเฉพาะตารางเปล่า ไม่ต้องแจ้งเตือน error
                documentsList = data.documents || [];
                updateDocumentTable(documentsList);
            } catch (error) {
                console.error('Error loading documents:', error);
                // ไม่ต้องแสดง error message
            }
        }

        function updateCategoryHistory(category) {
            if (category) {
                categoryHistory.add(category);
                updateCategoryDatalist();
            }
        }

        function updateCategoryDatalist() {
            const datalist = document.getElementById('categoryList');
            datalist.innerHTML = '';
            categoryHistory.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                datalist.appendChild(option);
            });
        }
        
        function updateDocumentTable(documents) {
            const tbody = document.getElementById('documentsTableBody');
            tbody.innerHTML = '';
            
            if (!documents || documents.length === 0) {
                // แสดงแถวเปล่า
                for (let i = 0; i < 5; i++) { // แสดง 5 แถวเปล่า
                    tbody.innerHTML += `
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                    `;
                }
                return;
            }

            documents
                .filter(doc => EDITABLE_STATUSES.includes(doc.status))
                .forEach((doc, index) => {
                    tbody.innerHTML += `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${doc.category_name}</td>
                            <td>${doc.document_number}</td>
                            <td>${doc.revision_number}</td>
                            <td>${doc.title}</td>
                            <td>${doc.status}</td>
                            <td><a href="${doc.file_url}" target="_blank">ดูไฟล์</a></td>
                            <td>${formatDate(doc.created_at)}</td>
                            <td>${doc.created_by_name}</td>
                        </tr>
                    `;
                });
        } 

        function showDocumentForm() {
            clearForm();
            document.getElementById('documentForm').style.display = 'block';
        }

        async function checkDocument() {
            const category = document.getElementById('categoryInput').value;
            const documentNumber = document.getElementById('documentNumber').value;
            const revisionNumber = document.getElementById('revisionNumber').value;            
         
            try {
                const response = await fetch(`/user/rfa/check-document?siteId=${currentSiteId}&category=${category}&documentNumber=${documentNumber}`);
                const data = await response.json();

                if (data.exists) {
                    const latestDoc = data.documents[0]; // เอาเอกสารล่าสุด
                    if (!EDITABLE_STATUSES.includes(latestDoc.status)) {
                        showStatusModal(latestDoc.status); // ส่ง status ล่าสุดไปแสดง
                        return;
                    }
                    showUploadForm(latestDoc.title);
                } else {
                    showUploadForm();
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function showStatusModal(status) {
            const modal = document.getElementById('statusModal');
            const statusText = document.getElementById('documentStatus');
            statusText.textContent = status || 'ไม่พบสถานะ';
            modal.showModal();
            
            // เพิ่ม event listener สำหรับปุ่มปิด
            modal.querySelector('button').onclick = () => {
                modal.close();
                location.reload(); // Refresh หน้าเมื่อปิด
            };
        }

        function showUploadForm(existingTitle = '') {
            document.getElementById('uploadForm').style.display = 'block';
            if (existingTitle) {
                document.getElementById('documentName').value = existingTitle;
            }
        }

        async function handleSubmit() {
            const documentName = document.getElementById('documentName').value;
            const file = document.getElementById('documentFile').files[0];
            const requiredFields = {
                'categoryInput': 'หมวดงาน',
                'documentNumber': 'เลขที่เอกสาร',
                'revisionNumber': 'Rev.No',
                'documentName': 'ชื่อเอกสาร',
                'documentFile': 'ไฟล์เอกสาร'
            };

            for (const [id, label] of Object.entries(requiredFields)) {
                const element = document.getElementById(id);
                if (!element.value) {
                    showError(`กรุณากรอก${label}`);
                    return;
                }
            }      

            if (!documentName.trim()) {
                showError('กรุณากรอกชื่อเอกสาร');
                return;
            }
            
            if (!file) {
                showError('กรุณาเลือกไฟล์');
                return;
            }

            try {
                const formData = new FormData();
                formData.append('siteId', currentSiteId);
                formData.append('category', document.getElementById('categoryInput').value);
                formData.append('documentNumber', document.getElementById('documentNumber').value);
                formData.append('revisionNumber', document.getElementById('revisionNumber').value);
                formData.append('documentName', document.getElementById('documentName').value);
                formData.append('document', document.getElementById('documentFile').files[0]);
                formData.append('status', 'BIM ส่งแบบ');

                const submitBtn = document.getElementById('submitBtn');
                submitBtn.disabled = true;
                // แสดง spinner และข้อความ
                const spinnerHTML = `
                    <div class="spinner-container">
                        <div class="spinner"></div>
                        <p>กำลังส่งเอกสาร กรุณารอสักครู่...</p>
                    </div>
                `;
                document.getElementById('uploadForm').insertAdjacentHTML('beforeend', spinnerHTML); 

                const response = await fetch('/user/rfa/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    document.getElementById('successModal').showModal();
                } else {
                    showError(result.error || 'เกิดข้อผิดพลาดในการบันทึกข้อมูล');
                    // ไม่ clear form เมื่อเกิด error
                    return;
                }

                // clear form เมื่อสำเร็จเท่านั้น
                clearForm();
            } catch (error) {
                console.error('Error submitting document:', error);
                showError('เกิดข้อผิดพลาดในการส่งเอกสาร');
            } finally {
                document.getElementById('submitBtn').disabled = false;
                // ลบ spinner
                const spinner = document.querySelector('.spinner-container');
                if (spinner) spinner.remove();
            }
        }

        function handleSuccessClose() {
            // ปิด Modal
            document.getElementById('successModal').close();
            
            // รีเซ็ต select โครงการ
            const siteSelect = document.getElementById('site');
            siteSelect.value = '';
            
            // ซ่อนฟอร์มทั้งหมด
            document.getElementById('documentForm').style.display = 'none';
            document.getElementById('uploadForm').style.display = 'none';
            
            // เคลียร์ค่าในฟอร์ม
            clearForm();
            
            // รีเซ็ตปุ่มส่งเอกสาร
            const addDocumentBtn = document.getElementById('addDocumentBtn');
            addDocumentBtn.disabled = true;
            addDocumentBtn.classList.add('disabled');
            
            // แสดงตารางเปล่า
            document.getElementById('documentTable').style.display = 'block';
            initEmptyTable();
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('th-TH');
        }

        function clearForm() {
            // เคลียร์ค่าในฟอร์มทั้งหมด
            const formFields = [
                'categoryInput',
                'documentNumber',
                'revisionNumber',
                'documentName',
                'documentFile'
            ];
            
            formFields.forEach(fieldId => {
                const element = document.getElementById(fieldId);
                if (element) {
                    element.value = '';
                }
            });
            
            // เคลียร์ datalist ของหมวดงาน
            const categoryList = document.getElementById('categoryList');
            if (categoryList) {
                categoryList.innerHTML = '';
            }
            
            // ลบข้อความ error ถ้ามี
            const errorMessage = document.querySelector('.error-message');
            if (errorMessage) {
                errorMessage.remove();
            }
            
            // ลบ spinner ถ้ามี
            const spinner = document.querySelector('.spinner-container');
            if (spinner) {
                spinner.remove();
            }
        }

        function hideAllSections() {
            document.getElementById('documentTable').style.display = 'none';
            document.getElementById('addDocumentBtn').style.display = 'none';
            document.getElementById('documentForm').style.display = 'none';
            document.getElementById('uploadForm').style.display = 'none';
        }

        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.textContent = message;
            errorDiv.style.cssText = `
                background-color: #ffebee;
                color: #c62828;
                padding: 10px;
                margin: 10px 0;
                border-radius: 4px;
                text-align: center;
            `;
            
            // ลบ error message เก่า
            const oldError = document.querySelector('.error-message');
            if (oldError) oldError.remove();
            
            // แทรก error message ใหม่
            const form = document.getElementById('uploadForm');
            form.insertBefore(errorDiv, form.firstChild);
            
            // auto hide after 5 seconds
            setTimeout(() => errorDiv.remove(), 5000);
        }                  
    </script>
</body>
</html>